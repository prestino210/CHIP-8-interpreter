# Compiler and flags
CC = gcc
CFLAGS = -Iinclude -Wall -O2

# Directories
SRC_DIR = src
BUILD_DIR = build
BIN_DIR = $(BUILD_DIR)/bin

# Source files: start.c + all .c in src and subfolders
SRCS = start.c $(wildcard src/*.c) $(wildcard src/*/*.c)


# Object files: put in build/, keeping folder structure
OBJS = $(patsubst %.c,$(BUILD_DIR)/%.o,$(SRCS))

# Executable
TARGET = $(BIN_DIR)/output.exe

# Default target
all: $(TARGET)

# Link objects into final executable
$(TARGET): $(OBJS) | $(BIN_DIR)
	$(CC) $(OBJS) -o $@

# Compile c to o, creating build subfolders as needed
$(BUILD_DIR)/%.o: %.c | $(BUILD_DIR)/%
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

# Create build/bin folder
$(BIN_DIR):
	mkdir -p $(BIN_DIR)

# Create other build subfolders as needed
$(BUILD_DIR)/%.o: %.c
	@if not exist "$(dir $@)" mkdir "$(dir $@)"
	$(CC) $(CFLAGS) -c $< -o $@


# Clean build artifacts
clean:
	rm -rf $(BUILD_DIR)/*

.PHONY: all clean
